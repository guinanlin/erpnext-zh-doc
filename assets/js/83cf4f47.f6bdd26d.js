"use strict";(self.webpackChunkstsinc_docs=self.webpackChunkstsinc_docs||[]).push([[466],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),i=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=i(a),f=r,m=u["".concat(s,".").concat(f)]||u[f]||c[f]||p;return a?n.createElement(m,l(l({ref:t},d),{},{components:a})):n.createElement(m,l({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,l=new Array(p);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var i=2;i<p;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},7334:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>p,metadata:()=>o,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));const p={},l="Database API",o={unversionedId:"Python\u670d\u52a1\u5668\u7aefAPI/DataBase API",id:"Python\u670d\u52a1\u5668\u7aefAPI/DataBase API",title:"Database API",description:"frappe.db.get_list",source:"@site/resource-center/50. Python\u670d\u52a1\u5668\u7aefAPI/20. DataBase API.md",sourceDirName:"50. Python\u670d\u52a1\u5668\u7aefAPI",slug:"/Python\u670d\u52a1\u5668\u7aefAPI/DataBase API",permalink:"/resource-center/Python\u670d\u52a1\u5668\u7aefAPI/DataBase API",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Document API",permalink:"/resource-center/Python\u670d\u52a1\u5668\u7aefAPI/Document API"},next:{title:"Frappe DataTable \u914d\u7f6e",permalink:"/resource-center/\u5176\u4ed6API/Frappe DataTabale API"}},s={},i=[{value:"frappe.db.get_list ",id:"frappedbget_list-",level:2},{value:"frappe.db.get_all ",id:"frappedbget_all-",level:2},{value:"frappe.db.get_value ",id:"frappedbget_value-",level:2},{value:"frappe.db.get_single_value ",id:"frappedbget_single_value-",level:2},{value:"frappe.db.set_value ",id:"frappedbset_value-",level:2},{value:"frappe.db.exists ",id:"frappedbexists-",level:2},{value:"frappe.db.count ",id:"frappedbcount-",level:2},{value:"frappe.db.delete ",id:"frappedbdelete-",level:2},{value:"frappe.db.truncate ",id:"frappedbtruncate-",level:2},{value:"frappe.db.commit ",id:"frappedbcommit-",level:2},{value:"frappe.db.savepoint ",id:"frappedbsavepoint-",level:2},{value:"frappe.db.rollback ",id:"frappedbrollback-",level:2},{value:"frappe.db.sql ",id:"frappedbsql-",level:2},{value:"frappe.db.multisql ",id:"frappedbmultisql-",level:2},{value:"frappe.db.rename_table ",id:"frappedbrename_table-",level:2},{value:"frappe.db.describe ",id:"frappedbdescribe-",level:2},{value:"frappe.db.change_column_type ",id:"frappedbchange_column_type-",level:2},{value:"frappe.db.add_index ",id:"frappedbadd_index-",level:2},{value:"frappe.db.add_unique ",id:"frappedbadd_unique-",level:2},{value:"Database transaction hooks ",id:"database-transaction-hooks-",level:2},{value:"Database transaction model ",id:"database-transaction-model-",level:2},{value:"Web requests ",id:"web-requests-",level:3},{value:"Background/scheduled Jobs ",id:"backgroundscheduled-jobs-",level:3},{value:"Patches ",id:"patches-",level:3},{value:"Unit tests ",id:"unit-tests-",level:3}],d={toc:i},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"database-api"},"Database API"),(0,r.kt)("h2",{id:"frappedbget_list-"},"frappe.db.get_list",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-get-list"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.get_list(doctype, filters, or_filters, fields, order_by, group_by, start, page_length)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Also aliased to ",(0,r.kt)("inlineCode",{parentName:"li"},"frappe.get_list"))),(0,r.kt)("p",null,"Returns a list of records from a ",(0,r.kt)("inlineCode",{parentName:"p"},"doctype")," table. ORM Wrapper for a ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," query. ",(0,r.kt)("strong",{parentName:"p"},"Will also apply user permissions for the records for the session user. Only returns the document names if the ",(0,r.kt)("inlineCode",{parentName:"strong"},"fields")," keyword argument is not given.")," By default this method returns a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"dict"),"s, but, you can pluck a particular field by giving the ",(0,r.kt)("inlineCode",{parentName:"p"},"pluck")," keyword argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.get_list('Employee')\n\n# output\n[{'name': 'HR-EMP-00008'},\n {'name': 'HR-EMP-00006'},\n {'name': 'HR-EMP-00010'},\n {'name': 'HR-EMP-00005'}\n]\n\n# with pluck\nfrappe.db.get_list('Employee', pluck='name')\n\n# output\n['HR-EMP-00008',\n 'HR-EMP-00006',\n 'HR-EMP-00010',\n 'HR-EMP-00005'\n]\n")),(0,r.kt)("p",null,"Combining filters and other arguments:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.get_list('Task',\n    filters={\n        'status': 'Open'\n    },\n    fields=['subject', 'date'],\n    order_by='date desc',\n    start=10,\n    page_length=20,\n    as_list=True\n)\n\n# output\n(('Update Branding and Design', '2019-09-04'),\n('Missing Documentation', '2019-09-02'),\n('Fundraiser for Foundation', '2019-09-03'))\n\n# Tasks with date after 2019-09-08\nfrappe.db.get_list('Task', filters={\n    'date': ['>', '2019-09-08']\n})\n\n# Tasks with date between 2020-04-01 and 2021-03-31 (both inclusive)\nfrappe.db.get_list('Task', filters=[[\n    'date', 'between', ['2020-04-01', '2021-03-31']\n]])\n\n# Tasks with subject that contains \"test\"\nfrappe.db.get_list('Task', filters={\n    'subject': ['like', '%test%']\n})\n\n# Count number of tasks grouped by status\nfrappe.db.get_list('Task',\n    fields=['count(name) as count', 'status'],\n    group_by='status'\n)\n# output\n[{'count': 1, 'status': 'Working'},\n {'count': 2, 'status': 'Overdue'},\n {'count': 2, 'status': 'Open'},\n {'count': 1, 'status': 'Filed'},\n {'count': 20, 'status': 'Completed'},\n {'count': 1, 'status': 'Cancelled'}]\n")),(0,r.kt)("h2",{id:"frappedbget_all-"},"frappe.db.get_all",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-get-all"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.get_all(doctype, filters, or_filters, fields, order_by, group_by, start, page_length)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Also aliased to ",(0,r.kt)("inlineCode",{parentName:"li"},"frappe.get_all"))),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"frappe.db.get_list")," but will fetch all records without applying permissions."),(0,r.kt)("h2",{id:"frappedbget_value-"},"frappe.db.get_value",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-get-value"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.get_value(doctype, name, fieldname)` or `frappe.db.get_value(doctype, filters, fieldname)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Also aliased to ",(0,r.kt)("inlineCode",{parentName:"li"},"frappe.get_value")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"frappe.db.get_values"))),(0,r.kt)("p",null,"Returns a document's field value or a list of values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# single value\nsubject = frappe.db.get_value('Task', 'TASK00002', 'subject')\n\n# multiple values\nsubject, description = frappe.db.get_value('Task', 'TASK00002', ['subject', 'description'])\n\n# as dict\ntask_dict = frappe.db.get_value('Task', 'TASK00002', ['subject', 'description'], as_dict=1)\ntask_dict.subject\ntask_dict.description\n\n# with filters, will return the first record that matches filters\nsubject, description = frappe.db.get_value('Task', {'status': 'Open'}, ['subject', 'description'])\n")),(0,r.kt)("h2",{id:"frappedbget_single_value-"},"frappe.db.get_single_value",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-get-single-value"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.get_single_value(doctype, fieldname)\n")),(0,r.kt)("p",null,"Returns a field value from a Single DocType."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"timezone = frappe.db.get_single_value('System Settings', 'timezone')\n")),(0,r.kt)("h2",{id:"frappedbset_value-"},"frappe.db.set_value",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-set-value"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.set_value(doctype, name, fieldname, value)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Also aliased to ",(0,r.kt)("inlineCode",{parentName:"li"},"frappe.db.update"))),(0,r.kt)("p",null,"Sets a field's value in the database, does not call the ORM triggers but updates the modified timestamp (unless specified not to)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# update a field value\nfrappe.db.set_value('Task', 'TASK00002', 'subject', 'New Subject')\n\n# update multiple values\nfrappe.db.set_value('Task', 'TASK00002', {\n    'subject': 'New Subject',\n    'description': 'New Description'\n})\n\n# update without updating the `modified` timestamp\nfrappe.db.set_value('Task', 'TASK00002', 'subject', 'New Subject', update_modified=False)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This method won't call ORM triggers like ",(0,r.kt)("inlineCode",{parentName:"p"},"validate")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"on_update"),". Use this method to update hidden fields or if you know what you are doing.")),(0,r.kt)("h2",{id:"frappedbexists-"},"frappe.db.exists",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-exists"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.exists(doctype, name)\n")),(0,r.kt)("p",null,"Returns true if a document record exists."),(0,r.kt)("p",null,"Pass doctype and docname:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.exists("User", "jane@example.org", cache=True)\n')),(0,r.kt)("p",null,"Pass a dict of filters including the ",(0,r.kt)("inlineCode",{parentName:"p"},'"doctype"')," key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.exists({"doctype": "User", "full_name": "Jane Doe"})\n')),(0,r.kt)("p",null,"Pass the doctype and a dict of filters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.exists("User", {"full_name": "Jane Doe"})\n')),(0,r.kt)("h2",{id:"frappedbcount-"},"frappe.db.count",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-count"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.count(doctype, filters)\n")),(0,r.kt)("p",null,"Returns number of records for a given ",(0,r.kt)("inlineCode",{parentName:"p"},"doctype")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"filters"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# total number of Task records\nfrappe.db.count('Task')\n\n# total number of Open tasks\nfrappe.db.count('Task', {'status': 'Open'})\n")),(0,r.kt)("h2",{id:"frappedbdelete-"},"frappe.db.delete",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-delete"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.delete(doctype, filters)\n")),(0,r.kt)("p",null,"Delete ",(0,r.kt)("inlineCode",{parentName:"p"},"doctype")," records that match ",(0,r.kt)("inlineCode",{parentName:"p"},"filters"),". This runs a DML command, which means it can be rolled back. If no filters specified, all the records of the doctype are deleted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.delete("Route History", {\n    "modified": ("&lt;=", last_record_to_keep[0].modified),\n    "user": user\n})\n\nfrappe.db.delete("Error Log")\nfrappe.db.delete("__Test Table")\n')),(0,r.kt)("p",null,"You may pass the doctype name or an internal table name. Conventionally, internal tables in Frappe are prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"__"),". The API follows this. The above commands run an unconditional ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," query over tables ",(0,r.kt)("strong",{parentName:"p"},"tabError Log")," and ",(0,r.kt)("strong",{parentName:"p"},"__Test Table"),"."),(0,r.kt)("h2",{id:"frappedbtruncate-"},"frappe.db.truncate",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-truncate"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.truncate(doctype)\n")),(0,r.kt)("p",null,"Truncate a table in the database. This runs a DDL command ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUNCATE TABLE"),", a commit is triggered before the statement is executed. This action cannot be rolled back. You may want to use this for clearing out log tables periodically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.truncate("Error Log")\nfrappe.db.truncate("__Test Table")\n')),(0,r.kt)("p",null,"The above commands run a ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUNCATE")," query over tables ",(0,r.kt)("strong",{parentName:"p"},"tabError Log")," and ",(0,r.kt)("strong",{parentName:"p"},"__Test Table"),"."),(0,r.kt)("h2",{id:"frappedbcommit-"},"frappe.db.commit",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-commit"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.commit()\n")),(0,r.kt)("p",null,"Commits current transaction. Calls SQL ",(0,r.kt)("inlineCode",{parentName:"p"},"COMMIT"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"In most cases you don't need to commit manually. Refer Frappe's ",(0,r.kt)("a",{parentName:"p",href:"https://frappeframework.com/docs/user/en/api/database#database-transaction-model"},"Database transaction model")," below.")),(0,r.kt)("h2",{id:"frappedbsavepoint-"},"frappe.db.savepoint",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-savepoint"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.savepoint(save_point)\n")),(0,r.kt)("p",null,"Create a named savepoint to which you can later roll back to."),(0,r.kt)("h2",{id:"frappedbrollback-"},"frappe.db.rollback",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-rollback"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.rollback()\n")),(0,r.kt)("p",null,"Rollbacks current transaction. Calls SQL ",(0,r.kt)("inlineCode",{parentName:"p"},"ROLLBACK"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Frappe will automatically run ",(0,r.kt)("inlineCode",{parentName:"p"},"frappe.db.rollback()")," if an exception is thrown during a Web Request of type ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT"),". Use this if you have to rollback early in a transaction.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.rollback(save_point="save_point_name")\n')),(0,r.kt)("p",null,"Rollback to a specific savepoint instead rolling back full transactions. This rollback won't undo changes done to filesytem and any other rollback watchers."),(0,r.kt)("h2",{id:"frappedbsql-"},"frappe.db.sql",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-sql"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.sql(query, values, as_dict)\n")),(0,r.kt)("p",null,"Execute an arbitrary SQL query. This may be useful for complex server side reports with join statements, adjusting the database to new features, etc."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'values = {\'company\': \'Frappe Technologies Inc\'}\ndata = frappe.db.sql("""\n    SELECT\n        acc.account_number\n        gl.debit\n        gl.credit\n    FROM `tabGL Entry` gl\n        LEFT JOIN `tabAccount` acc\n        ON gl.account = acc.name\n    WHERE gl.company = %(company)s\n""", values=values, as_dict=0)\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Avoid using this method as it will bypass validations and integrity checks. It's always better to use ",(0,r.kt)("a",{parentName:"p",href:"https://frappeframework.com/docs/v14/user/en/api/document#frappeget_doc"},"frappe.get_doc"),", ",(0,r.kt)("a",{parentName:"p",href:"https://frappeframework.com/docs/user/en/api/database#frappedbget_list"},"frappe.db.get_list"),", etc., if possible.")),(0,r.kt)("h2",{id:"frappedbmultisql-"},"frappe.db.multisql",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-multisql"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.multisql({'mariadb': mariadb_query, 'postgres': postgres_query})\n")),(0,r.kt)("p",null,"Execute the suitable SQL statement for any supported database engine."),(0,r.kt)("h2",{id:"frappedbrename_table-"},"frappe.db.rename_table",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-rename-table"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.rename_table(old_name, new_name)\n")),(0,r.kt)("p",null,"Executes a query to change table name. Specify the DocType or internal table's name directly to rename the table."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.rename_table("__internal_cache", "__temporary_cache")\nfrappe.db.rename_table("todo", "ToDo")\n')),(0,r.kt)("p",null,"The second example should be used only if you understand the ramifications of it."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Don't use this to rename DocType tables. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"frappe.rename_doc")," for that instead")),(0,r.kt)("h2",{id:"frappedbdescribe-"},"frappe.db.describe",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-describe"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.describe(doctype)\n")),(0,r.kt)("p",null,"Returns a tuple of the table description for given DocType."),(0,r.kt)("h2",{id:"frappedbchange_column_type-"},"frappe.db.change_column_type",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-change-column-type"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.change_column_type(doctype, column, new_type)\n")),(0,r.kt)("p",null,"Changes the type of column for specified DocType."),(0,r.kt)("h2",{id:"frappedbadd_index-"},"frappe.db.add_index",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-add-index"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.add_index(doctype, fields, index_name)\n")),(0,r.kt)("p",null,"Creates indexes for doctypes for the specified fields."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: if you want an index on a TEXT or a BLOB field, you must specify a fixed length to do that.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.add_index("Notes", ["id(10)", "content(500)"], index_name)\n')),(0,r.kt)("h2",{id:"frappedbadd_unique-"},"frappe.db.add_unique",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#frappe-db-add-unique"}," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"frappe.db.add_unique(doctype, fields, constraint_name=None)\n")),(0,r.kt)("p",null,"Creates unique constraint for doctypes for the specified fields."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'frappe.db.add_unique("DoctypeName",["field1","field2"])\n')),(0,r.kt)("h2",{id:"database-transaction-hooks-"},"Database transaction hooks",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#database-transaction-hooks"}," ")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: This API is introduced in v15.")),(0,r.kt)("p",null,"Frappe provides hooks for running callbacks before/after transaction commands like commit/rollback are issued. These hooks are useful for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Rolling back changes that are done outside of the database if the transaction is rolled back"),(0,r.kt)("li",{parentName:"ul"},"Flushing changes outside of the database only if the transaction is committed.")),(0,r.kt)("p",null,"These hooks are :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"frappe.db.before_commit.add(func: Callable)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"frappe.db.after_commit.add(func: Callable)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"frappe.db.before_rollback.add(func: Callable)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"frappe.db.after_rollback.add(func: Callable)"))),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def create_file(self):\n    self.write_file()\n    # This ensures rollback if DB transaction is rolledback\n    frappe.db.after_rollback.add(self.rollback_file)\n\ndef rollback_file(self):\n    self.delete_file()\n")),(0,r.kt)("h2",{id:"database-transaction-model-"},"Database transaction model",(0,r.kt)("a",{parentName:"h2",href:"https://frappeframework.com/docs/user/en/api/database#database-transaction-model"}," ")),(0,r.kt)("p",null,"Frappe's database abstractions implement a sane transaction model by default. So in most cases, you won't have to deal with SQL transactions manually. A broad description of this model is described below:"),(0,r.kt)("h3",{id:"web-requests-"},"Web requests",(0,r.kt)("a",{parentName:"h3",href:"https://frappeframework.com/docs/user/en/api/database#web-requests"}," ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"While performing ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"PUT"),", if any writes were made to the database, they are committed at end of the successful request."),(0,r.kt)("li",{parentName:"ul"},"AJAX calls made using ",(0,r.kt)("inlineCode",{parentName:"li"},"frappe.call")," are ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," by default unless changed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GET")," requests do not cause an implicit commit."),(0,r.kt)("li",{parentName:"ul"},"Any ",(0,r.kt)("strong",{parentName:"li"},"uncaught")," exception during handling of request will rollback the transaction.")),(0,r.kt)("h3",{id:"backgroundscheduled-jobs-"},"Background/scheduled Jobs",(0,r.kt)("a",{parentName:"h3",href:"https://frappeframework.com/docs/user/en/api/database#background-scheduled-jobs"}," ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Calling a function as background or scheduled job will commit the transaction after successful completion."),(0,r.kt)("li",{parentName:"ul"},"Any ",(0,r.kt)("strong",{parentName:"li"},"uncaught")," exception will cause rollback of the transaction.")),(0,r.kt)("h3",{id:"patches-"},"Patches",(0,r.kt)("a",{parentName:"h3",href:"https://frappeframework.com/docs/user/en/api/database#patches"}," ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Successful completion of the patch's ",(0,r.kt)("inlineCode",{parentName:"li"},"execute")," function will commit the transaction automatically."),(0,r.kt)("li",{parentName:"ul"},"Any ",(0,r.kt)("strong",{parentName:"li"},"uncaught")," exception will cause rollback of the transaction.")),(0,r.kt)("h3",{id:"unit-tests-"},"Unit tests",(0,r.kt)("a",{parentName:"h3",href:"https://frappeframework.com/docs/user/en/api/database#unit-tests"}," ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Transaction is committed after running one test module. Test module means any python test file like ",(0,r.kt)("inlineCode",{parentName:"li"},"test_core.py"),"."),(0,r.kt)("li",{parentName:"ul"},"Transaction is also committed after finishing all tests."),(0,r.kt)("li",{parentName:"ul"},"Any ",(0,r.kt)("strong",{parentName:"li"},"uncaught")," exception will exit the test runner, hence won't commit.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: If you're catching exceptions anywhere, then database abstraction does not know that something has gone wrong hence you're responsible for the correct rollback of the transaction.")))}c.isMDXComponent=!0}}]);